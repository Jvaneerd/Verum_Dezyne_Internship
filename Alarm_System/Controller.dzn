import Sensor.dzn;
import LED.dzn;
import Siren.dzn;
import Timer.dzn;
import PasswordManagement.dzn;

interface IController {
	in void start();
	in void stop();
	
	behaviour {
		bool isRunning = false;
		[!isRunning] { 
			on start: isRunning = true;
			on stop: illegal;
		}
		[isRunning] {
			on start: illegal;
			on stop: isRunning = false;
		}
	}
}

component Controller {
	provides IController iController;
	requires IPasswordManager iPasswordManager;
	requires ISensor iSensor;
	requires ILED iLED;
	requires ISiren iSiren;
	requires ITimer iTimer;
	
	behaviour {
		enum State { Unarmed, Armed, Alarming };
		bool isRunning = false;
		State state = State.Unarmed;
		[!isRunning] {	
			on iController.start(): {
				isRunning = true;
				iLED.setGreen();
			}
			on iPasswordManager.PasswordEntered(pw): {}
			on iSensor.triggered(): {}
		}
		[isRunning] {
			[state.Unarmed] {
				on iPasswordManager.PasswordEntered(pw): {
					bool correctPassword = iPasswordManager.VerifyPassword(pw);
					if(correctPassword) {
						iSensor.turnOn();
						iLED.setYellow();
						state = State.Armed;
					}
				}
				on iSensor.triggered(): {}
			}
			
			[state.Armed] {
				on iSensor.triggered(): {
					iSensor.turnOff();
					iTimer.start($30$);
					iLED.setRed();
					state = State.Alarming;
				}
				on iPasswordManager.PasswordEntered(pw): {
					bool correctPassword = iPasswordManager.VerifyPassword(pw);
					if(correctPassword) {
						iSensor.turnOff();
						iLED.setGreen();
						state = State.Unarmed;
					}
				}
			}
			
			[state.Alarming] {
				on iPasswordManager.PasswordEntered(pw): {
					bool correctPassword = iPasswordManager.VerifyPassword(pw);
					if(correctPassword) {
						iSensor.turnOn();
						iTimer.cancel();
						iSiren.turnOff();
						iLED.setYellow();
						state = State.Armed;
					}
				}
				on iTimer.timeout(): {
					iSiren.turnOn();
				}
				on iSensor.triggered(): illegal;
			}
			on iController.stop(): {
				iLED.turnOff();
				iTimer.cancel();
				isRunning = false;
				if(state == State.Armed) iSensor.turnOff();
				state = State.Unarmed;
			}
		}
	}
}