import LED.dzn;
import PWManager.dzn;
import Sensor.dzn;
import Timer.dzn;
import Siren.dzn;

interface IController {
  in void passwordEntered(String pw);

  behaviour {
    on passwordEntered: {}
  }
}

component Controller {
  provides IController iController;
  requires ILED iLED;
  requires IPWManager iPWManager;
  requires ISensor iSensor;
  requires ITimer iTimer;
  requires ISiren iSiren;

  behaviour {
    enum State { Unarmed, Armed, Alarming };
    State state = State.Unarmed;
    
    void ArmSystem() {
		iLED.setYellow();
		iSensor.turnOn();
		state = State.Armed;
    }

	on iController.passwordEntered(pw): {
		bool pwCorrect = iPWManager.verifyPassword(pw);
		if(pwCorrect) {
			if(state == State.Unarmed) {
				ArmSystem();
			}
			else if(state == State.Armed) {
        		iLED.setGreen();
        		iSensor.turnOff();
				state = State.Unarmed;
			}
			else if(state == State.Alarming) {
        		iSiren.turnOff();
        		iTimer.cancel();
        		ArmSystem();
			}
		}
	}
	
	on iSensor.triggered(): {
		[state.Armed] {
			iSensor.turnOff();
      		iLED.setRed();
      		iTimer.start($30000$);
			state = State.Alarming;
		}
	}
	
	on iTimer.timeout(): {
		[state.Alarming] {
			iSiren.turnOn();
		}
		[otherwise] illegal;
	}
  }
}
