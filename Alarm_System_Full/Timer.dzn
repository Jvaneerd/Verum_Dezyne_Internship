interface ITimer {
	extern long_integer $long$;
	enum State { Idle, Running, Stopping };
	in void start(long_integer milliseconds);
	in void cancel();
	out void timeout();

	behaviour {
		State state = State.Idle;

		[state.Idle] {
			on start: state = State.Running;
			on cancel: { }
		}

		[state.Running] {
			on start: illegal;
			on cancel: state = State.Idle;
			on inevitable: {
				state = State.Idle;
				timeout;
			}
		}
	}
}

interface AsyncITimer {
	extern long_integer $long$;
	enum State { Idle, Running, Stopping };
	in void start(long_integer milliseconds);
	in void cancel();
	out void timeout();
	out void cancelled();

	behaviour {
		State state = State.Idle;

		[state.Idle] {
			on start: state = State.Running;
			on cancel: { cancelled; }
		}

		[state.Running] {
			on start: illegal;
			on cancel: state = State.Stopping;
			on inevitable: {
				state = State.Idle;
				timeout;
			}
		}

		[state.Stopping] {
			on start: illegal;
			on cancel: illegal;
			on inevitable: {
				state = State.Idle;
				cancelled;
			}
		}
	}
}

component RobustTimer {
	provides ITimer iTimer;
	requires external AsyncITimer ext_iTimer;

	behaviour {
		enum State { Idle, Running, Stopping };
		State state = State.Idle;

		on iTimer.start(ms): {
			[state.Idle] {
				ext_iTimer.start(ms);
				state = State.Running;
			}
		}

		blocking on iTimer.cancel(): {
			[state.Running] {
				ext_iTimer.cancel();
				state = State.Stopping;
			}
			[state.Idle] { iTimer.reply(); }
		}

		on ext_iTimer.timeout(): {
			[state.Running] {
				iTimer.timeout();
				state = State.Idle;
			}
			[state.Stopping] { /* discard */ }
		}

		on ext_iTimer.cancelled(): {
			[state.Stopping] {
				iTimer.reply();
				state = State.Idle;
			}
		}
	}
}
