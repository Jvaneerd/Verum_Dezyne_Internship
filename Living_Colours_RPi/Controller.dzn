import Timer.dzn;
import RgbLed.dzn;
import DemoMode.dzn;
import ToggleAbles.dzn;

interface IController {
	in void mixButtonPressed();
	in void presetButtonPressed();
	in void begin();
	
	behaviour {	
		bool isRunning = false;
		[!isRunning] {
			on begin: isRunning = true;
			on mixButtonPressed: illegal;
			on presetButtonPressed: illegal;
		}
		
		[isRunning] {
			on begin: illegal;
			on mixButtonPressed: {}
			on presetButtonPressed: {}
		}
	}
}

component Controller {
	provides IController iController;
	requires IDemoMode iDemoMode;
	requires IToggleAble iMixMode;
	requires IToggleAble iPresetMode;
	
	behaviour {
		enum State { Demo, Mixing, Presets };
		State state = State.Demo;
		bool isRunning = false;
		
		[!isRunning] {
			on iController.begin(): {
				isRunning = true;
				iDemoMode.start();
				state = State.Demo;
			}
		}
		
		[isRunning] {
			on iController.mixButtonPressed(): {
				[state == State.Mixing] {
					iMixMode.toggle();
				}
				[state == State.Demo] {
					iDemoMode.stop();
					iMixMode.start();
					state = State.Mixing;
				} 
				[state == State.Presets] {
					iPresetMode.stop();
					iMixMode.start();
					state = State.Mixing;
				}
			} 
		
			on iController.presetButtonPressed(): {
				[state == State.Presets] {
					iPresetMode.toggle();
				}
				[state == State.Demo] {
					iDemoMode.stop();
					iPresetMode.start();
					state = State.Presets;
				} 
				[state == State.Mixing] {
					iMixMode.stop();
					iPresetMode.start();
					state = State.Presets;
				}
			}
		}
	}
}

component LivingColoursSystem {
	provides IController iController;
	requires IRGBLed iRGBLed;
	requires ITimer iTimer;
	requires IPotMeter iPotMeter;
	
	system {
		Controller controller;
		DemoMode demoMode;
		PresetMode presetMode;
		MixMode mixMode;
		ColourSupplier colourSupplier;
		RGBLedMux rgbLedMux;
		
		iController<=>controller.iController;
		controller.iDemoMode<=>demoMode.iDemoMode;
		demoMode.iTimer<=>iTimer;
		controller.iPresetMode<=>presetMode.iPresetMode;
		presetMode.iColourSupplier<=>colourSupplier.iColourSupplier;
		controller.iMixMode<=>mixMode.iMixMode;
		mixMode.iPotMeter<=>iPotMeter;
		
		rgbLedMux.demo<=>demoMode.iRGBLed;
		rgbLedMux.preset<=>presetMode.iRGBLed;
		rgbLedMux.mix<=>mixMode.iRGBLed;
		rgbLedMux.outLed<=>iRGBLed;
	}
}
