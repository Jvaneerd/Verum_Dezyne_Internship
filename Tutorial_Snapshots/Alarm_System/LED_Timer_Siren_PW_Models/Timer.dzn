interface ITimer {
	extern long_integer $long$;
	enum State { Idle, Running };
	in void start(long_integer milliseconds);
	in void cancel();
	out void timeout();

	behaviour {
		State state = State.Idle;

		[state.Idle] {
			on start: state = State.Running;
			on cancel: {}
		}

		[state.Running] {
			on start: illegal;
			on cancel: state = State.Idle;
			on inevitable: {
				state = State.Idle;
				timeout;
			}
		}
	}
}