extern Preset $uint8_t$;

interface IPresetMode {
	in void start();
	in void stop();
	in void toggle();
	
	behaviour {
		bool isRunning = false;
		on start: {
			[!isRunning] isRunning = true;
			[isRunning] illegal;
		}
		on stop: {
			[!isRunning] illegal;
			[isRunning] isRunning = false;
		}
		on toggle: {
			[!isRunning] illegal;
			[isRunning] {}
		}
	}
}

interface IPresetSelector {
	in void selectPreset(Preset p);
	in void stop();
	
	behaviour {
		on selectPreset: {}
		on stop: {}
	}
}

component PresetMode {
	provides IPresetMode iPresetMode;
	requires IPresetSelector iPresetSelector;
	
	behaviour {
		enum Presets { Yellow, Cyan, Magenta };
		Presets preset = Presets.Yellow;
		bool isRunning = false;
		
		on iPresetMode.start(): {
			[!isRunning] {
				isRunning = true;
				preset = Presets.Yellow;
				iPresetSelector.selectPreset($self->preset$);
			}
		}
		
		on iPresetMode.stop(): {
			[isRunning] {
				isRunning = false;
				iPresetSelector.stop();
			} 
		}
			
		on iPresetMode.toggle(): {
			[isRunning] {
				[preset == Presets.Yellow] {
					preset = Presets.Cyan;
					iPresetSelector.selectPreset($self->preset$);
				}
				[preset == Presets.Cyan] {
					preset = Presets.Magenta;
					iPresetSelector.selectPreset($self->preset$);
				}
				[preset == Presets.Magenta] {
					preset = Presets.Yellow;
					iPresetSelector.selectPreset($self->preset$);
				}
			} 
		}
	}
}
