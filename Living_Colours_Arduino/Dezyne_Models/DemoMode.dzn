import Timer.dzn;
import RGBLed.dzn;

interface IDemoMode {
	in bool start();
	in void stop();
	
	behaviour {
		enum DemoState { Started, Stopping, Stopped };
		DemoState demoState = DemoState.Stopped;
		on start: {
			[demoState == DemoState.Started] illegal;
			[demoState == DemoState.Stopping] reply(false);
			[demoState == DemoState.Stopped] {
				demoState = DemoState.Started;
				reply(true);
			}
		} 
		
		on stop: {
			[demoState == DemoState.Started] demoState = DemoState.Stopping;
			[demoState == DemoState.Stopping] illegal;
			[demoState == DemoState.Stopped] illegal;
		}
		
		[demoState == DemoState.Stopping] {
			on inevitable: {
				demoState = DemoState.Stopped;
			}
		}
	}
}

component DemoMode {
	provides IDemoMode iDemoMode;
	requires external ITimer iTimer;
	requires IRGBLed iRGBLed;
	
	behaviour {
		enum RgbState { Red, Green, Blue };
		enum DemoState { Started, Stopping, Stopped };
		RgbState rgbState = RgbState.Red;
		DemoState demoState = DemoState.Stopped;
		bool timeoutPending = false;
		
		on iDemoMode.start(): {
			[demoState == DemoState.Stopped] {
				demoState = DemoState.Started;
				iRGBLed.setRed();
				iTimer.start($1000$);
				reply(true);
			}
			[demoState == DemoState.Stopping] {
				reply(false);
			}
		} 
		
		on iDemoMode.stop(): {
			[demoState == DemoState.Started] {
				iRGBLed.dim();
				timeoutPending = iTimer.cancel();
				if(timeoutPending) {
					demoState = DemoState.Stopping;
				}
				else {
					demoState = DemoState.Stopped;
				}
			}
		}
		
		on iTimer.timeout(): {
			[demoState == DemoState.Started] {
				[rgbState == RgbState.Red] {
					rgbState = RgbState.Green;
					iRGBLed.setGreen();
					iTimer.start($1000$);
				} 
				
				[rgbState == RgbState.Green] {
					rgbState = RgbState.Blue;
					iRGBLed.setBlue();
					iTimer.start($1000$);
				}
				
				[rgbState == RgbState.Blue] {
					rgbState = RgbState.Red;
					iRGBLed.setRed();
					iTimer.start($1000$);
				} 
			}
			[demoState == DemoState.Stopping] {
				demoState = DemoState.Stopped;
				timeoutPending = false;
			}
			[demoState == DemoState.Stopped] { /* DemoState is stopped, timeouts can be safely ignored */ }
		}
	}
}