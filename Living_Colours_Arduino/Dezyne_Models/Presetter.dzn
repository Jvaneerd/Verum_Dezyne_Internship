enum Presets { One, Two, Three };

interface IPresetter {
	in void start();
	in void stop();
	in void toggle();
	
	behaviour {
		bool isRunning = false;
		on start: {
			[!isRunning] isRunning = true;
			[isRunning] illegal;
		}
		on stop: {
			[!isRunning] illegal;
			[isRunning] isRunning = false;
		}
		on toggle: {
			[!isRunning] illegal;
			[isRunning] {}
		}
	}
}

interface IPresetSelector {
	in void selectPreset();
	in void stop();
	
	behaviour {
		on selectPreset: {}
		on stop: {}
	}
}

component Presetter {
	provides IPresetter iPresetter;
	requires IPresetSelector iPresetSelector;
	
	behaviour {
		Presets preset = Presets.One;
		bool isRunning = false;
		
		on iPresetter.start(): {
			[!isRunning] {
				isRunning = true;
				preset = Presets.One;
				iPresetSelector.selectPreset();
			}
		}
		
		on iPresetter.stop(): {
			[isRunning] {
				isRunning = false;
				iPresetSelector.stop();
			} 
		}
			
		on iPresetter.toggle(): {
			[isRunning] {
				[preset == Presets.One] {
					preset = Presets.Two;
					iPresetSelector.selectPreset();
				}
				[preset == Presets.Two] {
					preset = Presets.Three;
					iPresetSelector.selectPreset();
				}
				[preset == Presets.Three] {
					preset = Presets.One;
					iPresetSelector.selectPreset();
				}
			} 
		}
	}
}
