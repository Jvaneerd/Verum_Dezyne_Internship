import RGBLed.dzn;
import DemoMode.dzn;
import MixMode.dzn;
import PresetMode.dzn;

interface IController {
	in void begin();
	in void mixButtonPressed();
	in void presetButtonPressed();

	behaviour {
		bool initialized = false;

		on begin: {
			[!initialized] initialized = true;
			[initialized] illegal;
		}

		[initialized] {
			on mixButtonPressed: {}
			on presetButtonPressed: {}
		}

		[!initialized] {
			on mixButtonPressed: illegal;
			on presetButtonPressed: illegal;
		}
	}
}

component Controller {
	provides IController iController;
	requires IDemoMode iDemoMode;
	requires IMixMode iMixMode;
	requires IPresetMode iPresetMode;

	behaviour {
		enum State { Demo, Mixing, Presets };
		bool initialized = false;

		State state = State.Demo;

		on iController.begin(): {
			[initialized] illegal;
			[!initialized] {
				initialized = true;
				iDemoMode.start();
			}
		}

		[initialized] {
			on iController.mixButtonPressed(): {
				[state == State.Mixing] {
					iMixMode.toggle();
				}
				[state == State.Demo] {
					iDemoMode.stop();
					iMixMode.start();
					state = State.Mixing;
				}
				[state == State.Presets] {
					iPresetMode.stop();
					iMixMode.start();
					state = State.Mixing;
				}
			}

			on iController.presetButtonPressed(): {
				[state == State.Presets] {
					iPresetMode.toggle();
				}
				[state == State.Demo] {
					iDemoMode.stop();
					iPresetMode.start();
					state = State.Presets;
				}
				[state == State.Mixing] {
					iMixMode.stop();
					iPresetMode.start();
					state = State.Presets;
				}
			}
		}

	}
}

component LivingColours {
	provides IController iController;
	requires ITimer iTimer;
	requires IRGBLed iRGBLed;
	requires IPotMeter iPotMeter;

	system {
		Controller controller;
		DemoMode demoMode;
		MixMode mixMode;
		PresetMode presetMode;
		RGBLedMux rgbLedMux;
		PresetList presetList;

		iController<=>controller.iController;
		iRGBLed<=>rgbLedMux.iPhysicalLed;
		controller.iDemoMode<=>demoMode.iDemoMode;
		controller.iMixMode<=>mixMode.iMixMode;
		controller.iPresetMode<=>presetMode.iPresetMode;
		demoMode.iTimer<=>iTimer;
		demoMode.iRGBLed<=>rgbLedMux.iDemoLed;
		presetMode.iPresetList<=>presetList.iPresetList;
		presetMode.iRGBLed<=>rgbLedMux.iPresetLed;
		mixMode.iPotMeter<=>iPotMeter;
		mixMode.iRGBLed<=>rgbLedMux.iMixLed;
	}
}
