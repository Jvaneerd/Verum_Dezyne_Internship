interface ITimer {
	extern long_integer $long$;
	in void start(long_integer ms);
	in bool cancel();
	out void timeout();
	
	behaviour {
		enum State { Idle, Running, Expired };
		State state = State.Idle;
		bool timeoutFired = false;
		
		on start: {
			[state == State.Idle] state = State.Running;
			[state == State.Running] illegal;
			[state == State.Expired] {
				[timeoutFired] state = State.Running;
<<<<<<< Updated upstream
				[!timeoutFired] illegal;
=======
>>>>>>> Stashed changes
			}
		}
		
		on cancel: {
			[state == State.Idle] reply(false);
			[state == State.Running] {
				state = State.Idle;
				reply(false);
			}
			[state == State.Expired] {
				[timeoutFired] {
					state = State.Idle;
					reply(true);
				}
				[!timeoutFired] {
<<<<<<< Updated upstream
					state = State.Idle;
					reply(false);
=======
					illegal;
>>>>>>> Stashed changes
				}
			}
		}
		
		on inevitable: {
			[state == State.Running] {
				timeout;
				timeoutFired = true;
				state = State.Expired;
			}
		}
	}
}